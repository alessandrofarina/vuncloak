package vulnerability;

import dependency.Dependency;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.*;
import java.net.URL;

public class VulnRestAPI {

    private static String authorization;

    public static void authorize(String email, String token) {
        String toEncode = email + ":" + token;
        authorization = "Basic " + Base64.getEncoder().encodeToString(toEncode.getBytes());
    }

    public static void applyVulnerabilities(ArrayList<Dependency> dependencies) throws IOException, ParseException {

        //OPEN CONNECTION
        URL url = new URL("https://ossindex.sonatype.org/api/v3/authorized/component-report");
        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Accept", "application/json");
        con.setRequestProperty("Authorization", authorization);
        con.setRequestProperty("Content-Type", "application/json");
        con.setDoOutput(true);

        //CREATE POST BODY
        String jsonInputString = "{\"coordinates\": [";
        for(Dependency d : dependencies)
            jsonInputString += "\"pkg:maven/" + d.getGroup() + "/" + d.getArtifact() + "@" + d.getVersion() + "\",";
        jsonInputString = jsonInputString.substring(0, jsonInputString.length() - 1);
        jsonInputString += "]}";

        try(OutputStream os = con.getOutputStream()) {
            byte[] input = jsonInputString.getBytes("utf-8");
            os.write(input, 0, input.length);
        }

        String jsonResponse = null;
        try(BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(), "utf-8"))) {
            StringBuilder response = new StringBuilder();
            String responseLine = null;
            while ((responseLine = br.readLine()) != null)
                response.append(responseLine.trim());
            jsonResponse = response.toString();
        }

        JSONArray coordinates = new JSONArray(jsonResponse);
        for(int i = 0; i < coordinates.length(); ++i) {
            JSONArray vulnerabilities = coordinates.getJSONObject(i).getJSONArray("vulnerabilities");

            ArrayList<Vulnerability> list = new ArrayList<>();
            for(int j = 0; j < vulnerabilities.length(); ++j) {
                JSONObject vulnerability = vulnerabilities.getJSONObject(j);
                String cve = (String) vulnerability.get("cve");
                double cvssScore = NumberFormat.getInstance(Locale.US).parse(vulnerability.get("cvssScore").toString()).doubleValue();
                list.add(new Vulnerability(cve, cvssScore));
            }
            dependencies.get(i).setVulnerabilities(list);
        }

    }

}
